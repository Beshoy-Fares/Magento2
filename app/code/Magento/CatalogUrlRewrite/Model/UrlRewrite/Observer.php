<?php
/**
 * Copyright Â© 2015 Magento. All rights reserved.
 * See COPYING.txt for license details.
 */
namespace Magento\CatalogUrlRewrite\Model\UrlRewrite;

use Magento\CatalogUrlRewrite\Model\Mode\Category as CategoryMode;
use Magento\CatalogUrlRewrite\Model\Mode\Product as ProductMode;
use Magento\CatalogUrlRewrite\Model\CategoryUrlPathGenerator;
use Magento\CatalogUrlRewrite\Model\ProductUrlPathGenerator;
use Magento\Framework\Event\Observer as EventObserver;
use Magento\Framework\Exception\LocalizedException;
use Magento\UrlRewrite\Model\UrlFinderInterface;
use Magento\UrlRewrite\Model\UrlRewrite;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite as UrlRewriteService;



class Observer
{
    /**
     * @var \Magento\CatalogUrlRewrite\Model\Mode\Product
     */
    protected $productMode;
    /**
     * @var \Magento\CatalogUrlRewrite\Model\Mode\Category
     */
    protected $categoryMode;

    protected $urlFinder;

    protected $productUrlPathGenerator;

    protected $categoryUrlPathGenerator;

    /**
     * @param ProductMode $productMode
     * @param CategoryMode $categoryMode
     * @param UrlFinderInterface $urlFinder
     * @param ProductUrlPathGenerator $productUrlPathGenerator
     * @param CategoryUrlPathGenerator $categoryUrlPathGenerator
     */
    public function __construct(
        ProductMode $productMode,
        CategoryMode $categoryMode,
        UrlFinderInterface $urlFinder,
        ProductUrlPathGenerator $productUrlPathGenerator,
        CategoryUrlPathGenerator $categoryUrlPathGenerator
    )
    {
        $this->productMode              = $productMode;
        $this->categoryMode             = $categoryMode;
        $this->urlFinder                = $urlFinder;
        $this->productUrlPathGenerator  = $productUrlPathGenerator;
        $this->categoryUrlPathGenerator = $categoryUrlPathGenerator;
    }

    /**
     * @param EventObserver $observer
     */
    public function handleUrlRewriteSave(EventObserver $observer)
    {
        /** @var \Magento\UrlRewrite\Model\UrlRewrite $urlRewrite */
        $urlRewrite = $observer->getEvent()->getUrlRewrite();
        $productId = $this->getProduct($urlRewrite)->getId();
        $categoryId = $this->getCategory($urlRewrite)->getId();
        if ($productId || $categoryId) {
            if ($urlRewrite->isObjectNew()) {
                $urlRewrite->setEntityType(
                    $productId ?
                        ProductMode::ENTITY_TYPE :
                        CategoryMode::ENTITY_TYPE
                )
                ->setEntityId($productId ?: $categoryId);
                if ($productId && $categoryId) {
                    $urlRewrite->setMetadata(serialize(['category_id' => $categoryId]));
                }
            }
            $urlRewrite->setTargetPath($this->getTargetPath($urlRewrite));
        }
    }

    /**
     * @param UrlRewrite $urlRewrite
     * @return \Magento\Catalog\Model\Product
     */
    protected function getProduct(UrlRewrite $urlRewrite)
    {
        return $this->productMode->getProduct($urlRewrite);
    }

    /**
     * @param UrlRewrite $urlRewrite
     * @return \Magento\Catalog\Model\Category
     */
    protected function getCategory(UrlRewrite $urlRewrite)
    {
        return $this->categoryMode->getCategory($urlRewrite);
    }

    /**
     * get target path
     * @param UrlRewrite $urlRewrite
     * @return string
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    protected function getTargetPath(UrlRewrite $urlRewrite)
    {
        $targetPath = $this->getCanonicalTargetPath($urlRewrite);
        if ($urlRewrite->getRedirectType() && !$urlRewrite->getIsAutogenerated()) {
            $data = [
                UrlRewriteService::ENTITY_ID => $urlRewrite->getEntityId(),
                UrlRewriteService::TARGET_PATH => $targetPath,
                UrlRewriteService::ENTITY_TYPE => $urlRewrite->getEntityType(),
                UrlRewriteService::STORE_ID => $urlRewrite->getStoreId(),
            ];
            $rewrite = $this->urlFinder->findOneByData($data);
            if (!$rewrite) {
                $message = $urlRewrite->getEntityType() === ProductMode::ENTITY_TYPE
                    ? __('Chosen product is not associated with the chosen store or category.')
                    : __('Chosen category is not associated with the chosen store.');
                throw new LocalizedException($message);
            }
            $targetPath = $rewrite->getRequestPath();
        }
        return $targetPath;
    }

    protected function getCanonicalTargetPath(UrlRewrite $urlRewrite)
    {
        $product = $this->getProduct($urlRewrite)->getId() ? $this->getProduct($urlRewrite) : null;
        $category = $this->getCategory($urlRewrite)->getId() ? $this->getCategory($urlRewrite) : null;
        return $product
            ? $this->productUrlPathGenerator->getCanonicalUrlPath($product, $category)
            : $this->categoryUrlPathGenerator->getCanonicalUrlPath($category);
    }
}