<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminMoveProductBetweenCategoriesTest">
        <annotations>
            <stories value="Move Product"/>
            <title value="Move Product between Categories (Cron is ON, 'Update by Schedule' Mode)"/>
            <description value="Verifies correctness of showing data (products, categories) on Storefront after moving an anchored category in terms of products/categories association"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-11296"/>
            <group value="catalog"/>
        </annotations>

        <before>
            <actionGroup ref="AdminLoginActionGroup" stepKey="LoginAsAdmin"/>
            <createData entity="defaultSimpleProduct" stepKey="simpleProduct"/>
            <createData entity="_defaultCategory" stepKey="createAnchoredCategory1"/>
            <createData entity="_defaultCategory" stepKey="createSecondCategory"/>

            <!-- Switch "Category Product" and "Product Category" indexers to "Update by Schedule" mode -->
            <actionGroup ref="AdminOpenIndexManagementPageActionGroup" stepKey="onIndexManagement"/>

            <actionGroup ref="AdminSwitchIndexerToActionModeActionGroup" stepKey="switchCategoryProduct">
                <argument name="indexerValue" value="catalog_category_product"/>
            </actionGroup>
            <actionGroup ref="AdminSwitchIndexerToActionModeActionGroup" stepKey="switchProductCategory">
                <argument name="indexerValue" value="catalog_product_category"/>
            </actionGroup>
            <actionGroup ref="AdminSwitchIndexerToActionModeActionGroup" stepKey="switchCatalogSearch">
                <argument name="indexerValue" value="catalogsearch_fulltext"/>
            </actionGroup>
        </before>

        <after>
            <!-- Switch "Category Product" and "Product Category" indexers to "Update by Save" mode -->
            <actionGroup ref="AdminOpenIndexManagementPageActionGroup" stepKey="onIndexManagement"/>

            <actionGroup ref="AdminSwitchIndexerToActionModeActionGroup" stepKey="switchCategoryProduct">
                <argument name="indexerValue" value="catalog_category_product"/>
                <argument name="action" value="Update on Save"/>
            </actionGroup>
            <actionGroup ref="AdminSwitchIndexerToActionModeActionGroup" stepKey="switchProductCategory">
                <argument name="indexerValue" value="catalog_product_category"/>
                <argument name="action" value="Update on Save"/>
            </actionGroup>

            <deleteData createDataKey="simpleProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="createSecondCategory" stepKey="deleteSecondCategory"/>
            <deleteData createDataKey="createAnchoredCategory1" stepKey="deleteAnchoredCategory1"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <!-- Create the anchored category <Cat1_anchored> -->
        <actionGroup ref="AdminAnchorCategoryActionGroup" stepKey="anchorCategory">
            <argument name="categoryName" value="$$createAnchoredCategory1.name$$"/>
        </actionGroup>

        <!-- Create subcategory <Sub1> of the anchored category -->
        <actionGroup ref="AdminClickOnAddSubcategoryButtonActionGroup" stepKey="clickOnAddSubCategoryButton"/>
        <actionGroup ref="AdminChangeCategoryNameActionGroup" stepKey="addSubCategoryName">
            <argument name="categoryName" value="{{SimpleSubCategory.name}}"/>
        </actionGroup>
        <actionGroup ref="AdminSaveCategoryActionGroup" stepKey="saveSubCategory1"/>
        <actionGroup ref="AssertMessageInAdminPanelActionGroup" stepKey="seeSaveSuccessMessage">
            <argument name="message" value="You saved the category."/>
        </actionGroup>

        <!-- Assign <product1> to the <Sub1> -->
        <actionGroup ref="AdminProductPageOpenByIdActionGroup" stepKey="goToProduct">
            <argument name="productId" value="$$simpleProduct.id$$"/>
        </actionGroup>
        <waitForPageLoad stepKey="waitForProductPageLoad"/>
        <click selector="{{AdminProductFormSection.categoriesDropdown}}" stepKey="activateDropDownCategory"/>
        <fillField userInput="{{SimpleSubCategory.name}}" selector="{{AdminProductFormSection.searchCategory}}" stepKey="fillSearch"/>
        <waitForPageLoad stepKey="waitForSubCategory"/>
        <click selector="{{AdminProductFormSection.selectCategory(SimpleSubCategory.name)}}" stepKey="selectSub1Category"/>
        <actionGroup ref="AdminSubmitCategoriesPopupActionGroup" stepKey="clickDone"/>
        <actionGroup ref="AdminProductFormSaveButtonClickActionGroup" stepKey="clickSave"/>

        <!-- Enable `Use Categories Path for Product URLs` on Stores -> Configuration -> Catalog -> Catalog -> Search Engine Optimization -->
        <amOnPage url="{{AdminCatalogSearchConfigurationPage.url}}" stepKey="onConfigPage"/>
        <waitForPageLoad stepKey="waitForLoading"/>
        <conditionalClick selector="{{AdminCatalogSearchEngineConfigurationSection.searchEngineOptimization}}" dependentSelector="{{AdminCatalogSearchEngineConfigurationSection.openedEngineOptimization}}" visible="false" stepKey="clickEngineOptimization"/>
        <uncheckOption selector="{{AdminCatalogSearchEngineConfigurationSection.systemValueUseCategoriesPath}}" stepKey="uncheckDefault"/>
        <selectOption userInput="Yes" selector="{{AdminCatalogSearchEngineConfigurationSection.selectUseCategoriesPatForProductUrls}}" stepKey="selectYes"/>
        <click selector="{{AdminConfigSection.saveButton}}" stepKey="saveConfig"/>
        <waitForPageLoad stepKey="waitForSaving"/>
        <actionGroup ref="AssertMessageInAdminPanelActionGroup" stepKey="seeMessage">
            <argument name="message" value="You saved the configuration."/>
        </actionGroup>

        <!-- Navigate to the Catalog > Products -->
        <actionGroup ref="AdminOpenCatalogProductPageActionGroup" stepKey="onCatalogProductPage"/>

        <!-- Click on <product1>: Product page opens-->
        <actionGroup ref="FilterProductGridByNameActionGroup" stepKey="filterProduct">
            <argument name="product" value="$$simpleProduct$$"/>
        </actionGroup>
        <click selector="{{AdminProductGridSection.productGridNameProduct($$simpleProduct.name$$)}}" stepKey="clickProduct1"/>
        <waitForPageLoad stepKey="waitForProductLoad"/>

        <!-- Clear "Categories" field and assign the product to <Cat2> and save the product -->
        <grabTextFrom selector="{{AdminProductFormSection.currentCategory}}" stepKey="grabNameSubCategory"/>
        <click selector="{{AdminProductFormSection.unselectCategories(SimpleSubCategory.name)}}" stepKey="removeCategory"/>
        <click selector="{{AdminProductFormSection.categoriesDropdown}}" stepKey="openDropDown"/>
        <checkOption selector="{{AdminProductFormSection.selectCategory($$createSecondCategory.name$$)}}" stepKey="selectCategory"/>
        <actionGroup ref="AdminSubmitCategoriesPopupActionGroup" stepKey="pressButtonDone"/>
        <actionGroup ref="AdminProductFormSaveButtonClickActionGroup" stepKey="pushButtonSave"/>

        <!--Product is saved -->
        <actionGroup ref="AssertMessageInAdminPanelActionGroup" stepKey="seeSuccessMessage">
            <argument name="message" value="You saved the product."/>
        </actionGroup>

        <!-- Run cron -->
        <magentoCLI command="cron:run --group=index" stepKey="runCron"/>

        <!-- Clear invalidated cache on System>Tools>Cache Management page  -->
        <actionGroup ref="AdminGoToCacheManagementPageActionGroup" stepKey="onCachePage"/>
        <waitForPageLoad stepKey="waitForCacheManagementPage"/>

        <checkOption selector="{{AdminCacheManagementSection.configurationCheckbox}}" stepKey="checkConfigCache"/>
        <checkOption selector="{{AdminCacheManagementSection.pageCacheCheckbox}}" stepKey="checkPageCache"/>

        <selectOption userInput="Refresh" selector="{{AdminCacheManagementSection.massActionSelect}}" stepKey="selectRefresh"/>
        <waitForElementVisible selector="{{AdminCacheManagementSection.massActionSubmit}}" stepKey="waitSubmitButton"/>
        <click selector="{{AdminCacheManagementSection.massActionSubmit}}" stepKey="clickSubmit"/>
        <waitForPageLoad stepKey="waitForRefresh"/>

        <actionGroup ref="AssertMessageInAdminPanelActionGroup" stepKey="seeCacheRefreshedMessage">
            <argument name="message" value="2 cache type(s) refreshed."/>
        </actionGroup>
        <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>

        <!-- Open frontend -->
        <comment userInput="Comment is added to preserve the step key for backward compatibility" stepKey="onFrontend"/>
        <!-- Open <Cat2> from navigation menu -->
        <actionGroup ref="StorefrontGoToCategoryPageActionGroup" stepKey="openCat2">
            <argument name="categoryName" value="$$createSecondCategory.name$$" />
        </actionGroup>
        <comment userInput="Comment is added to preserve the step key for backward compatibility" stepKey="waitForCategory2Page"/>

        <!-- # <Cat 2> should open # <product1> should be present on the page -->
        <actionGroup ref="AssertStorefrontCategoryTitleActionGroup" stepKey="seeCategoryName">
            <argument name="categoryTitle" value="$$createSecondCategory.name$$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductIsPresentOnCategoryPageActionGroup" stepKey="seeProduct">
            <argument name="productName" value="$$simpleProduct.name$$"/>
        </actionGroup>

        <!-- Open <product1>  -->
        <actionGroup ref="StorefrontOpenProductFromCategoryPageActionGroup" stepKey="openProduct">
            <argument name="productName" value="$$simpleProduct.name$$"/>
        </actionGroup>
        <comment userInput="Comment is added to preserve the step key for backward compatibility" stepKey="waitForProductPageLoading"/>

        <!-- # Product page should open successfully # Breadcrumb for product should be like <Cat 2> -->
        <actionGroup ref="StorefrontAssertProductNameOnProductPageActionGroup" stepKey="seeProductName">
            <argument name="productName" value="$$simpleProduct.name$$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontRightBreadcrumbsAreShownActionGroup" stepKey="seeCategoryInBreadcrumbs">
            <argument name="categoryName" value="$$createSecondCategory.name$$"/>
        </actionGroup>

        <!-- Open <Cat1_anchored> category -->
        <click selector="{{StorefrontNavigationSection.topCategory($$createAnchoredCategory1.name$$)}}" stepKey="clickCat1"/>
        <waitForPageLoad stepKey="waitForCategory1PageLoad"/>

        <!-- # Category should open successfully # <product1> should be absent on the page -->
        <actionGroup ref="AssertStorefrontCategoryTitleActionGroup" stepKey="seeCategory1Name">
            <argument name="categoryTitle" value="$$createAnchoredCategory1.name$$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontNoProductsFoundActionGroup" stepKey="seeEmptyNotice"/>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontseeProduct">
            <argument name="productName" value="$$simpleProduct.name$$"/>
        </actionGroup>

        <!-- Log in to the backend: Admin user is logged in-->
        <actionGroup ref="AdminLoginActionGroup" stepKey="LoginAdmin"/>

        <!-- Navigate to the Catalog > Products: Navigate to the Catalog>Products -->
        <actionGroup ref="AdminOpenCatalogProductPageActionGroup" stepKey="amOnProductPage"/>

        <!-- Click on <product1> -->
        <actionGroup ref="FilterAndSelectProductActionGroup" stepKey="openSimpleProduct">
            <argument name="productSku" value="$$simpleProduct.sku$$"/>
        </actionGroup>

        <!-- Clear "Categories" field and assign the product to <Sub1> and save the product -->
        <click selector="{{AdminProductFormSection.unselectCategories($$createSecondCategory.name$$)}}" stepKey="clearCategory"/>
        <click selector="{{AdminProductFormSection.categoriesDropdown}}" stepKey="activateDropDown"/>
        <fillField userInput="{$grabNameSubCategory}" selector="{{AdminProductFormSection.searchCategory}}" stepKey="fillSearchField"/>
        <waitForPageLoad stepKey="waitForSearchSubCategory"/>
        <click selector="{{AdminProductFormSection.selectCategory({$grabNameSubCategory})}}" stepKey="selectSubCategory"/>
        <actionGroup ref="AdminSubmitCategoriesPopupActionGroup" stepKey="clickButtonDone"/>
        <actionGroup ref="AdminProductFormSaveButtonClickActionGroup" stepKey="clickButtonSave"/>

        <!-- Product is saved successfully -->
        <actionGroup ref="AssertMessageInAdminPanelActionGroup" stepKey="seeSaveMessage">
            <argument name="message" value="You saved the product."/>
        </actionGroup>

        <!-- Run cron -->
        <magentoCLI command="cron:run --group=index" stepKey="runCron2"/>

        <!-- Open frontend -->
        <!--<actionGroup ref="StorefrontOpenHomePageActionGroup" stepKey="onFrontendPage"/>-->
        <comment userInput="Comment is added to preserve the step key for backward compatibility" stepKey="onFrontendPage"/>

        <!-- Open <Cat2> from navigation menu -->
        <actionGroup ref="StorefrontGoToCategoryPageActionGroup" stepKey="openSecondCategory">
            <argument name="categoryName" value="$$createSecondCategory.name$$"/>
        </actionGroup>
        <comment userInput="Comment is added to preserve the step key for backward compatibility" stepKey="waitForSecondCategoryPage"/>

        <!-- # <Cat 2> should open # <product1> should be absent on the page -->
        <actionGroup ref="AssertStorefrontCategoryTitleActionGroup" stepKey="seeSecondCategory1Name">
            <argument name="categoryTitle" value="$$createSecondCategory.name$$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductNameIsNotOnProductMainPageActionGroup" stepKey="dontseeSimpleProduct">
            <argument name="productName" value="$$simpleProduct.name$$"/>
        </actionGroup>

        <!-- Click on <Cat1_anchored> category -->
        <click selector="{{StorefrontHeaderSection.NavigationCategoryByName($$createAnchoredCategory1.name$$)}}" stepKey="clickAnchoredCategory"/>
        <waitForPageLoad stepKey="waitForAnchoredCategoryPage"/>

        <!-- # Category should open successfully # <product1> should be present on the page -->
        <actionGroup ref="AssertStorefrontCategoryTitleActionGroup" stepKey="see1CategoryName">
            <argument name="categoryTitle" value="$$createAnchoredCategory1.name$$"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductIsPresentOnCategoryPageActionGroup" stepKey="seeProductNameOnCategory1Page">
            <argument name="productName" value="$$simpleProduct.name$$"/>
        </actionGroup>

        <!-- Breadcrumb for product should be like <Cat1_anchored>/<product> (if you clicks from anchor category) -->
        <actionGroup ref="AssertStorefrontRightBreadcrumbsAreShownActionGroup" stepKey="seeCat1inBreadcrumbs">
            <argument name="categoryName" value="$$createAnchoredCategory1.name$$"/>
        </actionGroup>
        <dontSee userInput="{$grabNameSubCategory}" selector="{{StorefrontNavigationSection.categoryBreadcrumbs}}" stepKey="dontSeeSubCategoryInBreadCrumbs"/>

        <!-- <Cat1_anchored>/<Sub1>/<product> (if you clicks from Sub1 category) -->
        <moveMouseOver selector="{{StorefrontHeaderSection.NavigationCategoryByName($$createAnchoredCategory1.name$$)}}" stepKey="hoverCategory1"/>
        <click selector="{{StorefrontHeaderSection.NavigationCategoryByName({$grabNameSubCategory})}}" stepKey="clickSubCat"/>
        <waitForPageLoad stepKey="waitForSubCategoryPageLoad"/>

        <actionGroup ref="AssertStorefrontCategoryTitleActionGroup" stepKey="seeSubCategoryName">
            <argument name="categoryTitle" value="{$grabNameSubCategory}"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontProductIsPresentOnCategoryPageActionGroup" stepKey="seeProductNameOnSubCategoryPage">
            <argument name="productName" value="$$simpleProduct.name$$"/>
        </actionGroup>

        <actionGroup ref="AssertStorefrontRightBreadcrumbsAreShownActionGroup" stepKey="seeSubCategoryInBreadcrumbs">
            <argument name="categoryName" value="{$grabNameSubCategory}"/>
        </actionGroup>
        <actionGroup ref="AssertStorefrontRightBreadcrumbsAreShownActionGroup" stepKey="seeCat1InBreadcrumbs">
            <argument name="categoryName" value="$$createAnchoredCategory1.name$$"/>
        </actionGroup>
    </test>
</tests>
