<?php
/**
 * Copyright Â© 2015 Magento. All rights reserved.
 * See COPYING.txt for license details.
 */

/** @var \Magento\Catalog\Block\Adminhtml\Category\AssignProducts $block */

/** @var \Magento\Catalog\Block\Adminhtml\Category\Tab\Product $blockGrid */
$blockGrid = $block->getBlockGrid();
$gridJsObject = $blockGrid->getJsObjectName();
?>
<?php  echo $block->getGridHtml(); ?>
<input type="hidden" name="category_products" id="in_category_products" data-form-part="category_form" value="" />
<script type="text/javascript">
    require([
        "mage/adminhtml/grid"
    ], function () {
        'use strict';

        var assignProductsConfig = {
            "selectedProducts": <?php /* @escapeNotVerified */ echo $block->getProductsJson(); ?>,
            "gridJsObject": <?php /* @escapeNotVerified */ echo $gridJsObject; ?>
        };

        return function(config) {
            var selectedProducts = assignProductsConfig.selectedProducts,
                categoryProducts = $H(selectedProducts),
                gridJsObject = assignProductsConfig.gridJsObject,
                tabIndex = 1000;

            $('in_category_products').value = Object.toJSON(categoryProducts);

            function registerCategoryProduct(grid, element, checked){
                if (checked){
                    if(element.positionElement){
                        element.positionElement.disabled = false;
                        categoryProducts.set(element.value, element.positionElement.value);
                    }
                } else{
                    if (element.positionElement){
                        element.positionElement.disabled = true;
                    }
                    categoryProducts.unset(element.value);
                }
                $('in_category_products').value = Object.toJSON(categoryProducts);
                grid.reloadParams = {'selected_products[]':categoryProducts.keys()};
            }

            function categoryProductRowClick(grid, event){
                var trElement = Event.findElement(event, 'tr'),
                    isInput = Event.element(event).tagName == 'INPUT',
                    checked = false,
                    checkbox = null;

                if (trElement){
                    checkbox = Element.getElementsBySelector(trElement, 'input');
                    if (checkbox[0]){
                        checked = isInput ? checkbox[0].checked : !checkbox[0].checked;
                        gridJsObject.setCheckboxChecked(checkbox[0], checked);
                    }
                }
            }
            function positionChange(event){
                var element = Event.element(event);
                if (element && element.checkboxElement && element.checkboxElement.checked){
                    categoryProducts.set(element.checkboxElement.value, element.value);
                    $('in_category_products').value = Object.toJSON(categoryProducts);
                }
            }

            function categoryProductRowInit(grid, row){
                var checkbox = $(row).getElementsByClassName('checkbox')[0],
                    position = $(row).getElementsByClassName('input-text')[0];

                if (checkbox && position){
                    checkbox.positionElement = position;
                    position.checkboxElement = checkbox;
                    position.disabled = !checkbox.checked;
                    position.tabIndex = tabIndex++;
                    Event.observe(position,'keyup', positionChange);
                }
            }

            gridJsObject.rowClickCallback = categoryProductRowClick;
            gridJsObject.initRowCallback = categoryProductRowInit;
            gridJsObject.checkboxCheckCallback = registerCategoryProduct;
            if (gridJsObject.rows) {
                gridJsObject.rows.each(function(row){categoryProductRowInit(gridJsObject, row)});
            }
        }(assignProductsConfig);
    });
</script>
